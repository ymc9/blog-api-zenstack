//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum SpaceUserRole {
    MEMBER
    ADMIN
}

/// @@allow('read,create', true)
/// @@allow('all', auth() == this)
model User {
    id Int @id() @default(autoincrement())
    email String @unique()
    posts Post[]
    spaceMembership SpaceUser[]
    ownedSpaces Space[]
}

/// @@allow('read', true)
/// @@allow('all', auth() == owner || members ? [user == auth() && role == ADMIN])
model Space {
    id Int @id() @default(autoincrement())
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId Int
    name String
    slug String @unique()
    posts Post[]
    members SpaceUser[]
}

/// @@allow('read', true)
/// @@allow('all', space.owner == auth() || space.members ? [user == auth() && role == ADMIN])
model SpaceUser {
    id Int @id() @default(autoincrement())
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    role SpaceUserRole @default(MEMBER)

    @@unique([spaceId, userId])
}

/// @@allow('all', auth() == author || space.owner == auth() || space.members ? [user == auth() && role == ADMIN])
/// @@allow('read', published && space.members ? [user == auth()])
model Post {
    id Int @id() @default(autoincrement())
    title String
    published Boolean @default(false)
    author User? @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId Int?
    space Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId Int?
}